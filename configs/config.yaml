model:
  target: model.my_cldm_light.ControlLDM
  params:
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: "jpg"
    cond_stage_key: "txt"
    hint_key: hint
    image_size: 64
    channels: 4
    cond_stage_trainable: false
    conditioning_key: crossattn
    monitor: val/loss
    scale_factor: 0.18215
    use_ema: False
    only_mid_control: false

    control_stage_config:
      target: model.my_cldm_light.ControlNet
      params:
        image_size: 32
        in_channels: 4
        hint_channels: 3
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    unet_config:
      target: model.my_cldm_light.ControlledUnetModel
      params:
        image_size: 32
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    first_stage_config:
      target: model.ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: model.ldm.modules.encoders.modules.FrozenCLIPEmbedder

# training settings
training:
  base_learning_rate: 1.0e-4
  sd_locked: True

data:
  target: torch.utils.data.DataLoader
  params:
    json_file_path: "data/controlnet_train_dataset.json"
    image_resolution: 512
    batch_size: 2  
    num_workers: 8 
    persistent_workers: True 
    
  # validation set configuration
  validation_params:
    json_file_path: "data/controlnet_val_dataset.json"
    image_resolution: 512
    batch_size: 2
    num_workers: 8
    persistent_workers: True

lightning:
  callbacks:
    image_logger:
      target: model.logger.ImageLogger
      params:
        batch_frequency: 500
        max_images: 4
        clamp: true
        increase_log_steps: False
        rescale: true
        disabled: False
        log_on_batch_idx: true
        log_first_step: false

    checkpoint:
      target: pytorch_lightning.callbacks.ModelCheckpoint
      params:
        dirpath: ./checkpoints/train_simplified
        filename: '{epoch}-{step}-{val/loss:.2f}'
        verbose: true
        save_last: true
        save_top_k: 1
        monitor: "val/loss"
        mode: min

  trainer:
    benchmark: True
    max_epochs: 50
    devices: [0]  
    accelerator: "gpu"
    strategy: "ddp_spawn"
    precision: 16
    accumulate_grad_batches: 2
    gradient_clip_val: 1.0
    check_val_every_n_epoch: 1
    log_every_n_steps: 50
    enable_checkpointing: true
    default_root_dir: "lightning_logs"
    sync_batchnorm: True 